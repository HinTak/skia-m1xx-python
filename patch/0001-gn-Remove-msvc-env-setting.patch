From c6f2286a2795e36ff7b22b2c1030b2196d76e70e Mon Sep 17 00:00:00 2001
From: Ben Wagner <bungeman@google.com>
Date: Tue, 27 May 2025 16:32:19 -0400
Subject: [PATCH] [gn] Remove msvc env setting

SetEnv.cmd has long been removed but kept alive by Skia packaging of
MSVC. Older MSVC compilers and Windows SDKs relied on a large number of
environment variables to be set when cross compiling, but this should no
longer be necessary.

In addition, the MSVC ARM toolchains are now complete and no longer
require the host toolchain to be on the path.

These improvements mean that it is no longer necessary to use `cmd.exe
/c` as a "compiler wrapper" to set up the environment. Because it is not
generally possible to properly escape such command lines this has caused
issues with any arguments which would require proper escaping such as
paths with spaces and special characters.

This change drops support for building Skia for x86 or ARM64 with MSVC
from before VS2022, with the benefit of building for x86 or ARM64
without extemely odd, undocumented, and limiting restrictions.

Also add support for detecting MSVC 2022 before looking for 2019 or
2017.

Bug: 420271794, 376381591
Change-Id: I8591636aec31095b13db6dc1a376abfa23199ebd
Reviewed-on: https://skia-review.googlesource.com/c/skia/+/999356
Reviewed-by: Kaylee Lubick <kjlubick@google.com>
---
 gn/find_msvc.py       | 17 ++++++++++-------
 gn/toolchain/BUILD.gn | 24 ++++++++----------------
 2 files changed, 18 insertions(+), 23 deletions(-)

diff --git a/gn/find_msvc.py b/gn/find_msvc.py
index 108d576139..281a738900 100755
--- a/gn/find_msvc.py
+++ b/gn/find_msvc.py
@@ -10,16 +10,19 @@ import subprocess
 '''
 Look for the first match in the format
     C:\\Program Files (x86)\\Microsoft Visual Studio\\${RELEASE}\\${VERSION}\\VC
+    C:\\Program Files\\Microsoft Visual Studio\\${RELEASE}\\${VERSION}\\VC
+If not found, use vswhere.exe.
 '''
 def find_msvc():
   if sys.platform.startswith('win'):
-    default_dir = r'C:\Program Files (x86)\Microsoft Visual Studio'
-    for release in ['2019', '2017']:
-      for version in ['Enterprise', 'Professional', 'Community', 'BuildTools', 'Preview']:
-        path = os.path.join(default_dir, release, version, 'VC')
-        if os.path.isdir(path):
-          return path
-
+    default_dirs = [r'C:\Program Files\Microsoft Visual Studio',
+                    r'C:\Program Files (x86)\Microsoft Visual Studio']
+    for default_dir in default_dirs:
+      for release in ['2022', '2019', '2017']:
+        for version in ['Enterprise', 'Professional', 'Community', 'BuildTools', 'Preview']:
+          path = os.path.join(default_dir, release, version, 'VC')
+          if os.path.isdir(path):
+            return path
     # Fall back to vswhere.exe to determine non-standard installation paths
     # Fixed location, https://github.com/Microsoft/vswhere/wiki/Installing
     vswhere = os.path.join(os.getenv('ProgramFiles(x86)'),
diff --git a/gn/toolchain/BUILD.gn b/gn/toolchain/BUILD.gn
index 4d4abc952f..85858b5a01 100644
--- a/gn/toolchain/BUILD.gn
+++ b/gn/toolchain/BUILD.gn
@@ -87,16 +87,6 @@ template("msvc_toolchain") {
 
     bin = "$win_vc/Tools/MSVC/$win_toolchain_version/bin/HostX64/$toolchain_target_cpu"
 
-    env_setup = ""
-    if (toolchain_target_cpu == "x86") {
-      # Toolchain asset includes a script that configures for x86 building.
-      # We don't support x86 builds with local MSVC installations.
-      env_setup = "$shell $win_sdk/bin/SetEnv.cmd /x86 && "
-    } else if (toolchain_target_cpu == "arm64") {
-      # ARM64 compiler is incomplete - it relies on DLLs located in the host toolchain directory.
-      env_setup = "$shell set \"PATH=%PATH%;$win_vc\\Tools\\MSVC\\$win_toolchain_version\\bin\\HostX64\\x64\" && "
-    }
-
     cl_m32_flag = ""
 
     if (clang_win != "") {
@@ -126,7 +116,8 @@ template("msvc_toolchain") {
       if (toolchain_target_cpu == "x64") {
         _ml += "64"
       }
-      command = "$env_setup \"$bin/$_ml.exe\" {{asmflags}} /nologo /c /Fo {{output}} {{source}}"
+      command =
+          "\"$bin/$_ml.exe\" {{asmflags}} /nologo /c /Fo {{output}} {{source}}"
       outputs = [
         "{{source_out_dir}}/{{target_output_name}}.{{source_name_part}}.obj",
       ]
@@ -138,7 +129,7 @@ template("msvc_toolchain") {
       pdbname = "{{target_out_dir}}/{{label_name}}_c.pdb"
 
       # Label names may have spaces so pdbname must be quoted.
-      command = "$env_setup $cc_wrapper $cl /nologo /showIncludes /FC {{defines}} {{include_dirs}} {{cflags}} $cl_m32_flag {{cflags_c}} /c {{source}} /Fo{{output}} /Fd\"$pdbname\""
+      command = "$cc_wrapper $cl /nologo /showIncludes /FC {{defines}} {{include_dirs}} {{cflags}} $cl_m32_flag {{cflags_c}} /c {{source}} /Fo{{output}} /Fd\"$pdbname\""
       depsformat = "msvc"
       outputs = [
         "{{source_out_dir}}/{{target_output_name}}.{{source_name_part}}.obj",
@@ -151,7 +142,7 @@ template("msvc_toolchain") {
       pdbname = "{{target_out_dir}}/{{label_name}}_c.pdb"
 
       # Label names may have spaces so pdbname must be quoted.
-      command = "$env_setup $cc_wrapper $cl /nologo /showIncludes /FC {{defines}} {{include_dirs}} {{cflags}} $cl_m32_flag {{cflags_cc}} /c {{source}} /Fo{{output}} /Fd\"$pdbname\""
+      command = "$cc_wrapper $cl /nologo /showIncludes /FC {{defines}} {{include_dirs}} {{cflags}} $cl_m32_flag {{cflags_cc}} /c {{source}} /Fo{{output}} /Fd\"$pdbname\""
       depsformat = "msvc"
       outputs = [
         "{{source_out_dir}}/{{target_output_name}}.{{source_name_part}}.obj",
@@ -162,7 +153,8 @@ template("msvc_toolchain") {
     tool("alink") {
       rspfile = "{{output}}.rsp"
 
-      command = "$env_setup $lib /nologo /ignore:4221 {{arflags}} /OUT:{{output}} @$rspfile"
+      command =
+          "$lib /nologo /ignore:4221 {{arflags}} /OUT:{{output}} @$rspfile"
       outputs = [
         # Ignore {{output_extension}} and always use .lib, there's no reason to
         # allow targets to override this extension on Windows.
@@ -185,7 +177,7 @@ template("msvc_toolchain") {
       pdbname = "${dllname}.pdb"
       rspfile = "${dllname}.rsp"
 
-      command = "$env_setup $link /nologo /IMPLIB:$libname /DLL /OUT:$dllname /PDB:$pdbname @$rspfile"
+      command = "$link /nologo /IMPLIB:$libname /DLL /OUT:$dllname /PDB:$pdbname @$rspfile"
       outputs = [
         dllname,
         libname,
@@ -217,7 +209,7 @@ template("msvc_toolchain") {
       pdbname = "$exename.pdb"
       rspfile = "$exename.rsp"
 
-      command = "$env_setup $link /nologo /OUT:$exename /PDB:$pdbname @$rspfile"
+      command = "$link /nologo /OUT:$exename /PDB:$pdbname @$rspfile"
       default_output_extension = ".exe"
       default_output_dir = "{{root_out_dir}}"
       outputs = [ exename ]
-- 
2.49.0

